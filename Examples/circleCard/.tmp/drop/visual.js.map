{"version":3,"file":"visual.js","mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEU;AAE+D;AAC5E,IAAO,qBAAqB,GAAG,+FAA2C,CAAC;AAEpE,MAAM,cAAe,SAAQ,qBAAqB;IAAzD;;QACa,cAAS,GAAsB,IAAI,iBAAiB,EAAE,CAAC;IAC9D,CAAC;CAAA;AAEI,MAAM,iBAAiB;IAA9B;QACC,gBAAgB;QACR,iBAAY,GAAW,EAAE,CAAC;QAClC,WAAW;QACH,sBAAiB,GAAY,IAAI,CAAC;QAC1C,OAAO;QACC,SAAI,GAAW,EAAE,CAAC;QAC1B,mBAAmB;QACX,aAAQ,GAAW,EAAE,CAAC;QAC9B,YAAY;QACJ,aAAQ,GAAW,EAAE,CAAC;IAC9B,CAAC;CAAA;;;;;;;;;;;;AC9CN;;;;;;;;;;;;;;;;;;;;;;;;EAwBE;AACW;AAEmB;AAUY;AACrC,MAAM,MAAM;IAMf,YAAY,OAAiC;QACzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,QAAQ,EAAE;YACV,MAAM,KAAK,GAAgB,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACvD,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAgB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAClC;IACL,CAAC;IAEM,MAAM,CAAC,OAA4B;QACtC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3F,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;SAC/D;IACL,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,QAAkB;QAC3C,OAAuB,0EAAoB,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACI,wBAAwB,CAAC,OAA8C;QAC1E,OAAO,gHAAuC,CAAC,IAAI,CAAC,QAAQ,IAAI,oFAAyB,EAAE,EAAE,OAAO,CAAC,CAAC;IAC1G,CAAC;CACJ;;;;;;;;;;;;AC/EM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBmD;AACnD;AACO;AACP;AACA;AACA;AACA,WAAW,8DAAuB;AAClC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnCqD;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,sEAA8B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;ACjEA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,gDAAgD,GAAkB;IAClE,IAAI,EAAE,kDAAkD;IACxD,WAAW,EAAE,YAAY;IACzB,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,kDAAkD,CAAC,GAAG,gDAAgD,CAAC;CAClI;AACD,iEAAe,gDAAgD,EAAC","sources":["webpack:///./src/settings.ts","webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js","webpack:///external var \"Function('return this')()\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport { dataViewObjectsParser } from \"powerbi-visuals-utils-dataviewutils\";\nimport DataViewObjectsParser = dataViewObjectsParser.DataViewObjectsParser;\n\nexport class VisualSettings extends DataViewObjectsParser {\n      public dataPoint: dataPointSettings = new dataPointSettings();\n      }\n\n    export class dataPointSettings {\n     // Default color\n      public defaultColor: string = \"\";\n     // Show all\n      public showAllDataPoints: boolean = true;\n     // Fill\n      public fill: string = \"\";\n     // Color saturation\n      public fillRule: string = \"\";\n     // Text Size\n      public fontSize: number = 12;\n     }\n\n","/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\"use strict\";\n\nimport \"./../style/visual.less\";\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport EnumerateVisualObjectInstancesOptions = powerbi.EnumerateVisualObjectInstancesOptions;\nimport VisualObjectInstance = powerbi.VisualObjectInstance;\nimport DataView = powerbi.DataView;\nimport VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\n\nimport { VisualSettings } from \"./settings\";\nexport class Visual implements IVisual {\n    private target: HTMLElement;\n    private updateCount: number;\n    private settings: VisualSettings;\n    private textNode: Text;\n\n    constructor(options: VisualConstructorOptions) {\n        console.log('Visual constructor', options);\n        this.target = options.element;\n        this.updateCount = 0;\n        if (document) {\n            const new_p: HTMLElement = document.createElement(\"p\");\n            new_p.appendChild(document.createTextNode(\"Update count:\"));\n            const new_em: HTMLElement = document.createElement(\"em\");\n            this.textNode = document.createTextNode(this.updateCount.toString());\n            new_em.appendChild(this.textNode);\n            new_p.appendChild(new_em);\n            this.target.appendChild(new_p);\n        }\n    }\n\n    public update(options: VisualUpdateOptions) {\n        this.settings = Visual.parseSettings(options && options.dataViews && options.dataViews[0]);\n        console.log('Visual update', options);\n        if (this.textNode) {\n            this.textNode.textContent = (this.updateCount++).toString();\n        }\n    }\n\n    private static parseSettings(dataView: DataView): VisualSettings {\n        return <VisualSettings>VisualSettings.parse(dataView);\n    }\n\n    /**\n     * This function gets called for each of the objects defined in the capabilities files and allows you to select which of the\n     * objects and properties you want to expose to the users in the property pane.\n     *\n     */\n    public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstance[] | VisualObjectInstanceEnumerationObject {\n        return VisualSettings.enumerateObjectInstances(this.settings || VisualSettings.getDefault(), options);\n    }\n}","export function getValue(object, propertyName, defaultValue) {\r\n    if (!object) {\r\n        return defaultValue;\r\n    }\r\n    let propertyValue = object[propertyName];\r\n    if (propertyValue === undefined) {\r\n        return defaultValue;\r\n    }\r\n    return propertyValue;\r\n}\r\n/** Gets the solid color from a fill property using only a propertyName */\r\nexport function getFillColorByPropertyName(object, propertyName, defaultColor) {\r\n    let value = getValue(object, propertyName);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\n//# sourceMappingURL=dataViewObject.js.map","import * as DataViewObject from \"./dataViewObject\";\r\n/** Gets the value of the given object/property pair. */\r\nexport function getValue(objects, propertyId, defaultValue) {\r\n    if (!objects) {\r\n        return defaultValue;\r\n    }\r\n    return DataViewObject.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);\r\n}\r\n/** Gets an object from objects. */\r\nexport function getObject(objects, objectName, defaultValue) {\r\n    if (objects && objects[objectName]) {\r\n        return objects[objectName];\r\n    }\r\n    return defaultValue;\r\n}\r\n/** Gets the solid color from a fill property. */\r\nexport function getFillColor(objects, propertyId, defaultColor) {\r\n    const value = getValue(objects, propertyId);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\nexport function getCommonValue(objects, propertyId, defaultValue) {\r\n    const value = getValue(objects, propertyId, defaultValue);\r\n    if (value && value.solid) {\r\n        return value.solid.color;\r\n    }\r\n    if (value === undefined\r\n        || value === null\r\n        || (typeof value === \"object\" && !value.solid)) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=dataViewObjects.js.map","import * as DataViewObjects from \"./dataViewObjects\";\r\nexport class DataViewObjectsParser {\r\n    static getDefault() {\r\n        return new this();\r\n    }\r\n    static createPropertyIdentifier(objectName, propertyName) {\r\n        return {\r\n            objectName,\r\n            propertyName\r\n        };\r\n    }\r\n    static parse(dataView) {\r\n        let dataViewObjectParser = this.getDefault(), properties;\r\n        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {\r\n            return dataViewObjectParser;\r\n        }\r\n        properties = dataViewObjectParser.getProperties();\r\n        for (let objectName in properties) {\r\n            for (let propertyName in properties[objectName]) {\r\n                const defaultValue = dataViewObjectParser[objectName][propertyName];\r\n                dataViewObjectParser[objectName][propertyName] = DataViewObjects.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);\r\n            }\r\n        }\r\n        return dataViewObjectParser;\r\n    }\r\n    static isPropertyEnumerable(propertyName) {\r\n        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);\r\n    }\r\n    static enumerateObjectInstances(dataViewObjectParser, options) {\r\n        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];\r\n        if (!dataViewProperties) {\r\n            return [];\r\n        }\r\n        let instance = {\r\n            objectName: options.objectName,\r\n            selector: null,\r\n            properties: {}\r\n        };\r\n        for (let key in dataViewProperties) {\r\n            if (dataViewProperties.hasOwnProperty(key)) {\r\n                instance.properties[key] = dataViewProperties[key];\r\n            }\r\n        }\r\n        return {\r\n            instances: [instance]\r\n        };\r\n    }\r\n    getProperties() {\r\n        let properties = {}, objectNames = Object.keys(this);\r\n        objectNames.forEach((objectName) => {\r\n            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                let propertyNames = Object.keys(this[objectName]);\r\n                properties[objectName] = {};\r\n                propertyNames.forEach((propertyName) => {\r\n                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                        properties[objectName][propertyName] =\r\n                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return properties;\r\n    }\r\n}\r\nDataViewObjectsParser.InnumerablePropertyPrefix = /^_/;\r\n//# sourceMappingURL=dataViewObjectsParser.js.map","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar circleCard39C78F9FC7144750A2A719A4A49A35D5_DEBUG: IVisualPlugin = {\n    name: 'circleCard39C78F9FC7144750A2A719A4A49A35D5_DEBUG',\n    displayName: 'CircleCard',\n    class: 'Visual',\n    apiVersion: '3.8.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"circleCard39C78F9FC7144750A2A719A4A49A35D5_DEBUG\"] = circleCard39C78F9FC7144750A2A719A4A49A35D5_DEBUG;\n}\nexport default circleCard39C78F9FC7144750A2A719A4A49A35D5_DEBUG;"],"names":[],"sourceRoot":""}