/* -------- VAR -------- */
:root {
    --rowHeight: 20px;
    --timelineHeight: 40px;

    //the horizontal portion of the container that should be 
    //taken up by the gantt chart
    --chartPortionPct: 75%; //for flex
    --chartPortionFr: 75fr; //for grid
}

/*begin css reset*/
body {
    line-height: 1;
}

ol,
ul {
    list-style: none;
}

blockquote,
q {
    quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

/*end css reset*/

body {
    margin: 0px;
    // font-family: 'Segoe UI Semibold',wf_segoe-ui_semibold,helvetica,arial,sans-serif;
}

/* -------- DIV -------- */

div {
    border: 1px dashed black;
    padding: 0px;
    margin: 0px;
    width: 100%;
}

//div for the header of the graph: title, logo etc.
#div-header {
    // height: 10%;
    min-height: 30px;

    border-style: none none solid none;
    border-width: 1px;
    border-color: black;
}

//div that handles the overlapping of the content and status line. Grid.
#div-statusAndContent {
    display: grid;
    grid-template-columns: calc(100fr - var(--chartPortionFr)) var(--chartPortionFr);
    //grid-template-rows: 1fr 1fr;

    height: fit-content;
}

//div for the task headers and timeline
#div-timelineAndTasksHeader {
    height: fit-content;
    display: flex;

    grid-row-start: 1;
    grid-column-start: 1;
    grid-row-end: span 1;
    grid-column-end: span 2;
}

//the div below the above div that contains the tasks table and gantt
#div-content {
    height: fit-content;
    display: flex;
    justify-content: flex-end;

    grid-row-start: 2;
    grid-column-start: 1;
    grid-row-end: span 1;
    grid-column-end: span 2;
}


//div that contains the status line and accompanying text.
//Overlaps gantt and timeline but is one level up in the DOM heirachy,
#div-statusLine {
    grid-row-start: 1;
    grid-column-start: 2;
    grid-row-end: span 2;
    grid-column-end: span 1;

    height: 100%;
    z-index: 1;

}

#div-tasks {
    width: 25%;
    flex-shrink: 0;
}

#div-chartContainer {
    width:var(--chartPortionPct);

    display: grid;
    grid-template-columns: 1fr;
    border-style: none none none solid;
    border-width: 2px;
    border-color: black;

    height: 500px;
}

//https://ishadeed.com/article/less-absolute-positioning-modern-css/
//use grids, not absolutes!

.gridStack {
    //grid-area: 1 / 2; //can '2' be dynamic? Will fail if  2 =/= no. of grid items.
    //didnt get the above syntax to work...longhand it is.
    grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 1;
    grid-row-end: 2;
}

#div-structureLayer {
    height: 100%;
    display: flex;
    flex-direction: column;
    height: fit-content;
}

#div-svgLayer {
    height: 100%;
    z-index: 1;
}

// #overlay {
//     position: absolute;
//     display: block;
//     width: 100%;
//     height: 100%;
//     top: 0;
//     left: 0;
//     right: 0;
//     bottom: 0;
//     background-color: rgba(0, 0, 0, 0.0);
//     z-index: 2;
// }


#div-timeline {
    height: var(--timelineHeight);

}

#div-chart {
    height: fit-content;
    min-height: 150px;
    flex-grow: 1;
    position: relative;
}

/* ------- TABLE ------- */

table {
    width: 100%;
    border: 1px solid blue;
}

th {
    height: var(--timelineHeight);
}

tr {
    height: var(--rowHeight);
}

td {
    border: 1px #aaaaaa;
    border-style: solid none solid solid;
}

/* #table-ganttGrid{

} */

/* ------- TIMELINE ------- */

#svg-statusLine {
    z-index: 3;
}

#statusLine {
    stroke: rgb(255, 0, 0);
    stroke-width: 2px;
}



/* ------- DEBUG ------- */

.highlight {
    border: 1px solid #00ff00;
    background-color: rgba(0, 255, 0, 0.25);
}